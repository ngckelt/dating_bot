from pprint import pprint

from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.default.main_markup import main_markup
from keyboards.inline.yes_or_no_markup import yes_or_no_markup, yes_or_no_callback
from loader import dp
from utils.db_api import botdb as db
from keyboards.default.questionnaire_markups import fill_user_questionnaire
from .utils import create_message_by_user_questionnaire, is_correct_age_range, create_message_by_search_questionnaire
from states.change_search_questionnarie import ChangeSearchQuestionnaire
from .utils import prepare_answers, translate_choice
from keyboards.inline.user_questionare_markup import *


@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ üìù")
async def bot_start(message: types.Message):
    user = db.get_user(message.from_user.id)
    q = db.get_questionnaire_by_user(user)
    message_text = create_message_by_search_questionnaire(q)
    await message.answer(message_text)
    await message.answer(
        text="–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=change_search_questionnaire_markup()
    )
    await ChangeSearchQuestionnaire.chose_item.set()

"""
–í–æ–∑—Ä–∞—Å—Ç - 1
–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - 2
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - 3
–ì–æ—Ä–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - 4
–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è - 5
–î–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å - 6
–ñ–∏–ª—å–µ - 7
–ó–∞–Ω—è—Ç–∏–µ - 8
–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ - 9
–î–µ—Ç–∏ - 10
"""


@dp.callback_query_handler(change_user_data_callback.filter(), state=ChangeSearchQuestionnaire.chose_item)
async def get_change_item(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    item = callback_data.get('item')
    if item == 'age_range':
        await callback.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        await ChangeSearchQuestionnaire.change_age.set()
    elif item == 'nationality':
        question = db.get_search_question_by_id("2")
        answers = prepare_answers(question.answer_options)
        await state.update_data(answers=answers)
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=nationality_markup(answers)
        )
        await ChangeSearchQuestionnaire.change_nationality.set()
    elif item == 'education':
        question = db.get_search_question_by_id("3")
        answers = prepare_answers(question.answer_options)
        await state.update_data(answers=answers)
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            reply_markup=universal_markup(
                answers,
                'education_callback'
            )
        )
        await ChangeSearchQuestionnaire.change_education.set()
    elif item == 'education_city':
        question = db.get_search_question_by_id("4")
        answers = prepare_answers(question.answer_options)
        await state.update_data(answers=answers)
        await callback.message.answer(
            text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –ø–æ–ª—É—á–∞–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            reply_markup=universal_markup(
                answers,
                'education_city_callback',
                does_not_matter=True
            )
        )
        await ChangeSearchQuestionnaire.change_education_city.set()
    elif item == 'city':
        question = db.get_search_question_by_id("5")
        answers = prepare_answers(question.answer_options)
        await state.update_data(answers=answers)
        await callback.message.answer(
            text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
            reply_markup=universal_markup(
                answers,
                'city_callback',
                does_not_matter=True
            )
        )
        await ChangeSearchQuestionnaire.change_city.set()
    elif item == 'profession':
        question = db.get_search_question_by_id("8")
        answers = prepare_answers(question.answer_options)
        await state.update_data(answers=answers)
        await callback.message.answer(
            text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=universal_markup(
                answers,
                'profession_callback',
                does_not_matter=True
            )
        )
        await ChangeSearchQuestionnaire.change_profession.set()
    elif item == 'marital_status':
        question = db.get_search_question_by_id("9")
        answers = prepare_answers(question.answer_options)
        await state.update_data(answers=answers)
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=universal_markup(
                answers,
                'marital_status_callback'
            )
        )
        await ChangeSearchQuestionnaire.change_marital_status.set()
    elif item == 'has_car':
        await callback.message.answer(
            text="–î–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
            reply_markup=yes_or_no_markup('has_car', does_not_matter=True)
        )
        await ChangeSearchQuestionnaire.change_has_car.set()
    elif item == 'has_own_housing':
        await callback.message.answer(
            text="–î–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ",
            reply_markup=yes_or_no_markup('has_own_housing', does_not_matter=True)
        )
        await ChangeSearchQuestionnaire.change_has_own_housing.set()
    elif item == 'has_children':
        await callback.message.answer(
            text="–ú–æ–≥—É—Ç –ª–∏ –±—ã—Ç—å –¥–µ—Ç–∏",
            reply_markup=yes_or_no_markup('has_children')
        )
        await ChangeSearchQuestionnaire.change_has_children.set()


async def ask_to_continue_changing(message):
    await message.answer(
        text="–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
        reply_markup=yes_or_no_markup("continue_changing")
    )
    await ChangeSearchQuestionnaire.change_item.set()


@dp.callback_query_handler(yes_or_no_callback.filter(question='continue_changing'),
                           state=ChangeSearchQuestionnaire.change_item)
async def continue_changing(callback: types.CallbackQuery, callback_data: dict,
                            state: FSMContext):
    await callback.answer()
    if callback_data.get('choice') == 'yes':
        await callback.message.answer(
            text="–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=change_search_questionnaire_markup()
        )
        await ChangeSearchQuestionnaire.chose_item.set()
    else:
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
        # –¢—É—Ç –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
        user = db.get_user(callback.from_user.id)
        q = db.get_questionnaire_by_user(user)
        message_text = create_message_by_search_questionnaire(q)
        await callback.message.answer(message_text)
        await state.finish()


@dp.message_handler(state=ChangeSearchQuestionnaire.change_age)
async def change_age_range(message: types.Message, state: FSMContext):
    check = is_correct_age_range(message.text)
    if check.get('correct'):
        user = db.get_user(message.from_user.id)
        n1, n2 = check.get('n1'), check.get('n2')
        db.update_search_questionnaire(user, age_range=f"{n1} {n2}")
        await ask_to_continue_changing(message)
    else:
        await message.answer(check.get('message'))


# –°–º–µ–Ω–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
@dp.callback_query_handler(nationality_callback.filter(), state=ChangeSearchQuestionnaire.change_nationality)
async def change_nationality(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    nationalities = state_data.get('answers')
    nationality_index = callback_data.get('nationality')
    chosen_nationality = nationalities[int(nationality_index)]
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, nationality=chosen_nationality)
    await ask_to_continue_changing(callback.message)


# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(education_callback.filter(), state=ChangeSearchQuestionnaire.change_education)
async def get_education(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    educations = state_data.get('answers')
    education_index = callback_data.get('education')
    chosen_education = educations[int(education_index)]
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, education=chosen_education)
    await ask_to_continue_changing(callback.message)


# –ì–æ—Ä–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(education_city_callback.filter(), state=ChangeSearchQuestionnaire.change_education_city)
async def get_education_city(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    educations = state_data.get('answers')
    education_city_index = callback_data.get('education_city')
    if education_city_index == '-1':
        chosen_education_city = "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    else:
        chosen_education_city = educations[int(education_city_index)]
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, education_city=chosen_education_city)
    await ask_to_continue_changing(callback.message)


# –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(city_callback.filter(), state=ChangeSearchQuestionnaire.change_city)
async def get_city(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    cities = state_data.get('answers')
    city_index = callback_data.get('city')
    if city_index == '-1':
        chosen_city = "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    else:
        chosen_city = cities[int(city_index)]
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, city=chosen_city)
    await ask_to_continue_changing(callback.message)


# –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
@dp.callback_query_handler(profession_callback.filter(), state=ChangeSearchQuestionnaire.change_profession)
async def get_profession(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    professions = state_data.get('answers')
    profession_index = callback_data.get('profession')
    if profession_index == '-1':
        chosen_profession = "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    else:
        chosen_profession = professions[int(profession_index)]
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, profession=chosen_profession)
    await ask_to_continue_changing(callback.message)


# –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
@dp.callback_query_handler(marital_status_callback.filter(), state=ChangeSearchQuestionnaire.change_marital_status)
async def get_marital_status(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    marital_statuses = state_data.get('answers')
    status_index = callback_data.get('marital_status')
    chosen_status = marital_statuses[int(status_index)]
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, marital_status=chosen_status)
    await ask_to_continue_changing(callback.message)


# –ï—Å—Ç—å –ª–∏ —Ç–∞—á–∫–∞
@dp.callback_query_handler(yes_or_no_callback.filter(question='has_car'), state=ChangeSearchQuestionnaire.change_has_car)
async def has_car(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    choice = callback_data.get('choice')
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, has_car=translate_choice(choice))
    await ask_to_continue_changing(callback.message)


# –ï—Å—Ç—å –ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ
@dp.callback_query_handler(yes_or_no_callback.filter(question='has_own_housing'),
                           state=ChangeSearchQuestionnaire.change_has_own_housing)
async def has_own_housing(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    choice = callback_data.get('choice')
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, has_own_housing=translate_choice(choice))
    await ask_to_continue_changing(callback.message)


# –ú–æ–≥—É—Ç –ª–∏ –±—ã—Ç—å –¥–µ—Ç–∏
@dp.callback_query_handler(yes_or_no_callback.filter(question='has_children'),
                           state=ChangeSearchQuestionnaire.change_has_children)
async def has_children(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    choice = callback_data.get('choice')
    user = db.get_user(callback.from_user.id)
    db.update_search_questionnaire(user, has_children=translate_choice(choice))
    await ask_to_continue_changing(callback.message)


@dp.message_handler(state=ChangeSearchQuestionnaire.chose_item)
async def chose_item_error(message: types.Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"
    )



