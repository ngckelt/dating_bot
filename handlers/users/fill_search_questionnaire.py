from pprint import pprint

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default.main_markup import main_markup
from keyboards.default.questionnaire_markups import cancel_fill_markup, fill_search_questionnaire
from loader import dp
from states.fill_search_questionnaire import FillSearchQuestionnaire
from utils.db_api import botdb as db
from keyboards.inline.user_questionare_markup import *
from keyboards.inline.yes_or_no_markup import yes_or_no_markup, yes_or_no_callback
from .utils import *
from utils.cities.cities import check_city

MIN_AGE_ID = '1'
MAX_AGE_ID = '2'
NATIONALITY_ID = '3'
EDUCATION_ID = '4'
EDUCATION_CITY_ID = '5'
CITY_ID = '6'
HAS_CAR_ID = '7'
HAS_OWN_HOUSING_ID = '8'
PROFESSION_ID = '9'
MARITAL_STATUS_ID = '10'
HAS_CHILDREN_ID = '11'


@dp.message_handler(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ üîÑ", state=FillSearchQuestionnaire)
async def reset_fill(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    questionnaire = db.get_questionnaire_by_user(user)
    if not questionnaire:
        questions = db.get_search_questions()
        current_question = 1
        await state.update_data(questions=questions, current_question=current_question)
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        await message.answer(
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[MIN_AGE_ID].question}",
            reply_markup=cancel_fill_markup()
        )
        await FillSearchQuestionnaire.get_min_age.set()
    else:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞")


@dp.message_handler(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ‚ùå", state=FillSearchQuestionnaire)
async def cancel_fill(message: types.Message, state: FSMContext):
    await message.answer(
        text="–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–æ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è, "
             "–µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=fill_search_questionnaire()
    )
    await state.finish()


# –ù–∞—á–∞–ª–æ
@dp.message_handler(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ üìù")
async def bot_start(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    questionnaire = db.get_questionnaire_by_user(user)
    if not questionnaire:
        questions = db.get_search_questions()
        current_question = 1
        await state.update_data(questions=questions, current_question=current_question)
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        await message.answer(
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[MIN_AGE_ID].question}",
            reply_markup=cancel_fill_markup()
        )
        await FillSearchQuestionnaire.get_min_age.set()
    else:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞")


# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(state=FillSearchQuestionnaire.get_min_age)
async def get_min_age(message: types.Message, state: FSMContext):
    age = message.text
    check = is_correct_age(age)
    if check['correct']:
        state_data = await state.get_data()
        current_question = state_data.get('current_question')
        await state.update_data(min_age=age)
        questions = db.get_search_questions()
        current_question += 1
        await state.update_data(current_question=current_question)
        await message.answer(text=f"–í–æ–ø—Ä–æ—Å {current_question}/11\n{questions[MAX_AGE_ID].question}")
        await FillSearchQuestionnaire.get_max_age.set()
    elif check['message']:
        await message.answer(text=check['message'])


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(state=FillSearchQuestionnaire.get_max_age)
async def get_max_age(message: types.Message, state: FSMContext):
    age = message.text
    check = is_correct_age(age)
    if check['correct']:
        state_data = await state.get_data()
        if int(age) < int(state_data.get('min_age')):
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ")
        else:
            await state.update_data(max_age=age)
            questions = state_data.get('questions')
            current_question = state_data.get('current_question')
            current_question += 1
            answers = prepare_answers(questions[NATIONALITY_ID].answer_options)
            await state.update_data(current_question=current_question, nationalities=answers)
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            await message.answer(
                text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[NATIONALITY_ID].question}",
                reply_markup=nationality_markup(answers)
            )
            await FillSearchQuestionnaire.get_nationality.set()

    elif check['message']:
        await message.answer(text=check['message'])


# –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(nationality_callback.filter(), state=FillSearchQuestionnaire.get_nationality)
async def get_nationality(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    nationality = callback_data.get('nationality')
    nationalities = state_data.get('nationalities')
    nationality = nationalities[int(nationality)]
    await state.update_data(nationalities=None)
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    current_question += 1
    await state.update_data(nationality=nationality, current_question=current_question)
    answers = prepare_answers(questions[EDUCATION_ID].answer_options)
    await callback.message.answer(
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[EDUCATION_ID].question}",
        reply_markup=universal_markup(answers, 'education_callback')
    )
    await FillSearchQuestionnaire.get_education.set()


# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(education_callback.filter(), state=FillSearchQuestionnaire.get_education)
async def get_education(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    education_index = callback_data.get('education')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    educations = questions[EDUCATION_ID].answer_options.split('\n')
    current_question += 1
    education = educations[int(education_index)]

    await state.update_data(education=education, current_question=current_question)
    await callback.message.answer(
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥, –≥–¥–µ –ø–æ–ª—É—á–∞–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[EDUCATION_CITY_ID].question}",
        reply_markup=universal_markup(
            prepare_answers(questions[EDUCATION_CITY_ID].answer_options),
            'education_city_callback'
        )
    )
    await FillSearchQuestionnaire.get_education_city.set()


# –ì–æ—Ä–æ–¥, –≥–¥–µ –ø–æ–ª—É—á–∞–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(education_city_callback.filter(), state=FillSearchQuestionnaire.get_education_city)
async def get_education_city(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    education_city_index = callback_data.get('education_city')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    education_cities = questions[EDUCATION_CITY_ID].answer_options.split('\n')
    current_question += 1
    if int(education_city_index) == len(education_cities) - 1:
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
        await callback.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")
    else:
        education_city = education_cities[int(education_city_index)]
        await state.update_data(education_city=education_city, current_question=current_question)
        await callback.message.answer(
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —Ç–µ–∫—É—â–∫–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[CITY_ID].question}",
            reply_markup=universal_markup(
                prepare_answers(questions[CITY_ID].answer_options),
                'city_callback',
            )
        )
        await FillSearchQuestionnaire.get_city.set()


# –ì–æ—Ä–æ–¥, –≥–¥–µ –ø–æ–ª—É—á–∞–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ)
@dp.message_handler(state=FillSearchQuestionnaire.get_education_city)
async def get_education_city_by_message(message: types.Message, state: FSMContext):
    city = message.text
    check = check_city(city)
    if check.get('equal'):
        state_data = await state.get_data()
        questions = state_data.get('questions')
        current_question = state_data.get('current_question')
        current_question += 1
        education_city = city.capitalize()
        await state.update_data(education_city=education_city, current_question=current_question)
        await message.answer(
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —Ç–µ–∫—É—â–∫–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[CITY_ID].question}",
            reply_markup=universal_markup(
                prepare_answers(questions[CITY_ID].answer_options),
                'city_callback',
            )
        )
        await FillSearchQuestionnaire.get_city.set()
    elif check.get('candidate'):
        await state.update_data(city_candidate=check.get('candidate'))
        await message.answer(
            text=f"–í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª—å –≤ –≤–∏–¥—É {check.get('candidate')}?",
            reply_markup=yes_or_no_markup('city_candidate')
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–æ–∑–Ω–∞—Ç—å –í–∞—à –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


# –ì–æ—Ä–æ–¥ –≥–¥–µ –ø–æ–ª—É—á–∞–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–∞–Ω–¥–∏–¥–∞—Ç)
@dp.callback_query_handler(yes_or_no_callback.filter(question='city_candidate'),
                           state=FillSearchQuestionnaire.get_education_city)
async def get_education_city_candidate(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    choice = callback_data.get('choice')
    if choice == 'yes':
        state_data = await state.get_data()
        city = state_data.get('city_candidate')
        questions = state_data.get('questions')
        current_question = state_data.get('current_question')
        current_question += 1
        education_city = city.capitalize()
        await state.update_data(education_city=education_city, current_question=current_question)
        await callback.message.answer(
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ —Ç–µ–∫—É—â–∫–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[CITY_ID].question}",
            reply_markup=universal_markup(
                prepare_answers(questions[CITY_ID].answer_options),
                'city_callback',
            )
        )
        await FillSearchQuestionnaire.get_city.set()
    else:
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑")


# –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
@dp.callback_query_handler(city_callback.filter(), state=FillSearchQuestionnaire.get_city)
async def get_city(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    city_index = callback_data.get('city')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    cities = questions[CITY_ID].answer_options.split('\n')
    current_question += 1
    if int(city_index) == len(cities) - 1:
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")
    else:
        city = cities[int(city_index)]
        await state.update_data(city=city, current_question=current_question)
        await callback.message.answer(
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[HAS_CAR_ID].question}",
            reply_markup=yes_or_no_markup('has_car', does_not_matter=True)
        )
        await FillSearchQuestionnaire.has_car.set()


# –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ)
@dp.message_handler(state=FillSearchQuestionnaire.get_city)
async def get_city_by_message(message: types.Message, state: FSMContext):
    city = message.text
    check = check_city(city)
    if check.get('equal'):
        state_data = await state.get_data()
        questions = state_data.get('questions')
        current_question = state_data.get('current_question')
        current_question += 1
        living_city = city.capitalize()
        await state.update_data(city=living_city, current_question=current_question)
        await message.answer(
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[HAS_CAR_ID].question}",
            reply_markup=yes_or_no_markup('has_car', does_not_matter=True)
        )
        await FillSearchQuestionnaire.has_car.set()
    elif check.get('candidate'):
        await state.update_data(city_candidate=check.get('candidate'))
        await message.answer(
            text=f"–í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª—å –≤ –≤–∏–¥—É {check.get('candidate')}?",
            reply_markup=yes_or_no_markup('city')
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–æ–∑–Ω–∞—Ç—å –í–∞—à –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


# –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–∫–∞–Ω–¥–∏–¥–∞—Ç)
@dp.callback_query_handler(yes_or_no_callback.filter(question='city'), state=FillSearchQuestionnaire.get_city)
async def get_city_candidate(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    choice = callback_data.get('choice')
    if choice == 'yes':
        state_data = await state.get_data()
        city = state_data.get('city_candidate')
        questions = state_data.get('questions')
        current_question = state_data.get('current_question')
        current_question += 1
        living_city = city.capitalize()
        await state.update_data(city=living_city, current_question=current_question)
        await callback.message.answer(
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[HAS_CAR_ID].question}",
            reply_markup=yes_or_no_markup('has_car', does_not_matter=True)
        )
        await FillSearchQuestionnaire.has_car.set()
    else:
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑")


# –î–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å –º–∞—à–∏–Ω–∞
@dp.callback_query_handler(yes_or_no_callback.filter(question='has_car'), state=FillSearchQuestionnaire.has_car)
async def has_car(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    has_car = callback_data.get('choice')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    current_question += 1
    await state.update_data(has_car=has_car, current_question=current_question)
    await callback.message.answer(
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ
        text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[HAS_OWN_HOUSING_ID].question}",
        reply_markup=yes_or_no_markup('has_own_housing', does_not_matter=True)
    )
    await FillSearchQuestionnaire.has_own_housing.set()


# –ï—Å—Ç—å –ª–∏ –∂–∏–ª—å–µ (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(yes_or_no_callback.filter(question='has_own_housing'),
                           state=FillSearchQuestionnaire.has_own_housing)
async def has_own_housing(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    has_own_housing = callback_data.get('choice')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    current_question += 1
    await state.update_data(has_own_housing=has_own_housing, current_question=current_question)
    await callback.message.answer(
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ–º —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è
        text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[PROFESSION_ID].question}",
        reply_markup=universal_markup(
            prepare_answers(questions[PROFESSION_ID].answer_options),
            'profession_callback',
            does_not_matter=True
        )
    )
    await FillSearchQuestionnaire.get_profession.set()


# –ü—Ä–æ—Ñ–µ—Å—Å–∏—è (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(profession_callback.filter(), state=FillSearchQuestionnaire.get_profession)
async def get_profession(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    profession_index = callback_data.get('profession')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    professions = questions[PROFESSION_ID].answer_options.split('\n')
    current_question += 1
    if int(profession_index) == -1:
        profession = "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    else:
        profession = professions[int(profession_index)]
    await state.update_data(profession=profession, current_question=current_question)
    await callback.message.answer(
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[MARITAL_STATUS_ID].question}",
        reply_markup=universal_markup(
            prepare_answers(questions[MARITAL_STATUS_ID].answer_options),
            'marital_status_callback'
        )
    )
    await FillSearchQuestionnaire.get_marital_status.set()


# –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(marital_status_callback.filter(), state=FillSearchQuestionnaire.get_marital_status)
async def get_marital_status(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    marital_status_index = callback_data.get('marital_status')
    state_data = await state.get_data()
    questions = state_data.get('questions')
    current_question = state_data.get('current_question')
    marital_statuses = questions[MARITAL_STATUS_ID].answer_options.split('\n')
    current_question += 1
    marital_status = marital_statuses[int(marital_status_index)]
    await state.update_data(marital_status=marital_status, current_question=current_question)
    await callback.message.answer(
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–≥—É—Ç –ª–∏ –±—ã—Ç—å –¥–µ—Ç–∏
        text=f"–í–æ—Ä–æ—Å {current_question}/11\n{questions[HAS_CHILDREN_ID].question}",
        reply_markup=yes_or_no_markup('has_children')
    )
    await FillSearchQuestionnaire.has_children.set()


# –ï—Å—Ç—å –ª–∏ –¥–µ—Ç–∏ (–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(yes_or_no_callback.filter(question='has_children'),
                           state=FillSearchQuestionnaire.has_children)
async def has_children(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.answer()
    state_data = await state.get_data()
    has_children = callback_data.get('choice')
    user = db.get_user(callback.from_user.id)
    db.create_questionnaire(
        user=user,
        age_range=f"{state_data.get('min_age')}  {state_data.get('max_age')}",
        nationality=state_data.get('nationality'),
        education=state_data.get('education'),
        education_city=state_data.get('education_city'),
        city=state_data.get('city'),
        profession=state_data.get('profession'),
        marital_status=state_data.get('marital_status'),
        has_car=translate_choice(state_data.get('has_car')),
        has_own_housing=translate_choice(state_data.get('has_own_housing')),
        has_children=translate_choice(has_children),
    )

    questionnaire = db.get_questionnaire_by_user(user)
    questionnaire_text = create_message_by_search_questionnaire(questionnaire)
    await callback.message.answer(
        questionnaire_text,
        reply_markup=main_markup()
    )
    await state.finish()





